/**
 *  Pixelated.js
 * 
 *  A polyfill for `image-rendering: pixelated`.
 * 
 *  @author Maximillian Laumeister
 *  @link https://github.com/MaxLaumeister/pixelated-polyfill
 *  @license http://opensource.org/licenses/MIT MIT License
 *  @copyright 2020 Maximillian Laumeister
 */
!function(){class t{constructor(t){this.img=t}init(){const t=document.createElement("div");t.className="pixelated-polyfill",this.div=document.createElement("div"),this.div.className="pixelated-polyfill-inner",i(this.img,this.div),i(this.div,t),CSS.supports("image-rendering","pixelated")||(this.canvas=document.createElement("canvas"),this.canvas.style.display="block",this.canvas.style.width="100%",this.canvas.style.height="100%",this.canvas.style.position="absolute",this.canvas.style.top="0",this.canvas.style.left="0",this.canvas.style.pointerEvents="none",this.ctx=this.canvas.getContext("2d"),this.div.appendChild(this.canvas),this.updateCanvas(),this.img.style.opacity="0",new ResizeObserver(this.updateCanvas.bind(this)).observe(this.div))}updateCanvas(){const t=window.devicePixelRatio||1,i=this.div.clientWidth*t,e=this.div.clientHeight*t;this.lastSize&&this.lastSize.w===i&&this.lastSize.h===e||(this.canvas.width=i,this.canvas.height=e,this.lastSize={w:i,h:e}),this.ctx.save(),this.ctx.imageSmoothingEnabled=!1,this.ctx.drawImage(this.img,0,0,this.canvas.width,this.canvas.height),this.ctx.restore()}}function i(t,i){t.parentNode.insertBefore(i,t),i.appendChild(t)}t.initialized=!1,t.pixelate=(i=>{if("function"!=typeof i[Symbol.iterator]&&(i=[i]),!t.initialized){t.initialized=!0;const i="\n                .pixelated-polyfill {\n                    display: inline-block;\n                    font-size: 0;\n                }\n                .pixelated-polyfill-inner {\n                    display: inline-block;\n                    position: relative;\n                }\n            ",e=document.querySelector("style, link[type='text/css']"),s=document.createElement("style");s.type="text/css",s.textContent=i,e?e.parentNode.insertBefore(s,e):document.head.appendChild(s)}i.forEach(i=>{if(i instanceof HTMLImageElement){i.style.imageRendering="pixelated";const e=new t(i);i.complete?e.init():i.onload=(()=>{e.init()})}})}),window.PixelatedPolyfill=t}();
